/* Trie (Metin Ağacı) Nedir?
Trie (veya önek ağacı), genellikle bir dizi diziyi saklamak için kullanılan ağaç benzeri bir veri yapısıdır. Trie, "retrieval" (alma) kelimesinden türetilmiştir ve genellikle hızlı arama işlemleri için kullanılır. Her düğüm bir karakteri temsil eder ve kökten yaprağa giden yol, bir diziyi temsil eder.

Çalışma Şekli
Ekleme: Bir diziyi eklerken, dizinin karakterlerini teker teker alırız ve Trie'de bu karakterleri temsil eden yolu takip ederiz. Eğer yol yoksa, gerekli düğümleri ekleriz.
Arama: Bir diziyi ararken, dizinin karakterlerini teker teker alırız ve Trie'de bu karakterleri temsil eden yolu takip ederiz. Eğer yol boyunca tüm karakterleri bulabilirsek, dizi Trie'de mevcut demektir.
Silme: Bir diziyi silmek, dizinin son karakterine ulaşana kadar yolu takip etmeyi ve ardından gerekirse düğümleri kaldırmayı içerir.
Algoritma
Ekleme
Trie'yi kök düğümden başlatın.
Her karakter için, mevcut düğümdeki karaktere karşılık gelen alt düğümü kontrol edin.
Eğer alt düğüm yoksa, yeni bir düğüm oluşturun.
Son karaktere ulaştığınızda, bu düğümü son düğüm olarak işaretleyin.
Arama
Trie'yi kök düğümden başlatın.
Her karakter için, mevcut düğümdeki karaktere karşılık gelen alt düğümü kontrol edin.
Eğer herhangi bir karakter için alt düğüm yoksa, dizi Trie'de mevcut değildir.
Son karaktere ulaştığınızda, eğer bu düğüm son düğüm olarak işaretlenmişse, dizi Trie'de mevcuttur.  */



#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define ALPHABET_SIZE 26

struct TrieNode {
    struct TrieNode *children[ALPHABET_SIZE];
    bool is_end_of_word;
};

struct TrieNode *createNode() {
    struct TrieNode *node = (struct TrieNode *)malloc(sizeof(struct TrieNode));
    node->is_end_of_word = false;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        node->children[i] = NULL;
    }
    return node;
}

void insert(struct TrieNode *root, const char *word) {
    struct TrieNode *node = root;
    while (*word) {
        int index = *word - 'a';
        if (!node->children[index]) {
            node->children[index] = createNode();
        }
        node = node->children[index];
        word++;
    }
    node->is_end_of_word = true;
}

bool search(struct TrieNode *root, const char *word) {
    struct TrieNode *node = root;
    while (*word) {
        int index = *word - 'a';
        if (!node->children[index]) {
            return false;
        }
        node = node->children[index];
        word++;
    }
    return node != NULL && node->is_end_of_word;
}

int main() {
    struct TrieNode *root = createNode();
    
    insert(root, "muz");
    insert(root, "yarasa");
    
    printf("%s\n", search(root, "muz") ? "Found" : "Not found");
    printf("%s\n", search(root, "yarasa") ? "Found" : "Not found");

    return 0;
}
